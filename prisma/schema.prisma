// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  JURI
  ADMIN
}

model User {
  id           String               @id @default(uuid())
  username     String               @unique @db.VarChar(50)
  password     String
  role         Role                 @default(JURI)
  pertandingan JuriOnPertandingan[]
  point        Point[]
}

model Kegiatan {
  id           String         @id @default(cuid())
  nama         String
  tanggal      DateTime
  peserta      Peserta[]
  pertandingan Pertandingan[]
}

model Kategori {
  id      Int       @id @default(autoincrement())
  nama    String    @db.VarChar(50)
  peserta Peserta[]
}

model Kelas {
  id          Int       @id @default(autoincrement())
  nama        String    @db.Char(1)
  berat_badan Int
  peserta     Peserta[]
}

model Peserta {
  id          String         @id @default(cuid())
  kegiatan_id String         @db.VarChar(30)
  nama        String         @db.VarChar(255)
  perguruan   String         @db.VarChar(255)
  daerah      String         @db.VarChar(50)
  kategori_id Int
  kategori    Kategori       @relation(fields: [kategori_id], references: [id])
  kegiatan    Kegiatan       @relation(fields: [kegiatan_id], references: [id])
  sudut_merah Pertandingan[] @relation("sudut_merah")
  sudut_biru  Pertandingan[] @relation("sudut_biru")
  kelas_id    Int
  kelas       Kelas          @relation(fields: [kelas_id], references: [id])
  Point       Point[]
}

model JuriOnPertandingan {
  id              Int          @id @default(autoincrement())
  pertandingan_id Int
  pertandingan    Pertandingan @relation(fields: [pertandingan_id], references: [id])
  juri_id         String
  juri            User         @relation(fields: [juri_id], references: [id])
}

model Pertandingan {
  id             Int                  @id @default(autoincrement())
  gelanggang     String               @db.VarChar(50)
  sudut_merah_id String               @db.VarChar(30)
  sudut_merah    Peserta              @relation(fields: [sudut_merah_id], name: "sudut_merah", references: [id])
  sudut_biru_id  String               @db.VarChar(30)
  sudut_biru     Peserta              @relation(fields: [sudut_biru_id], name: "sudut_biru", references: [id])
  kegiatan_id    String
  kegiatan       Kegiatan             @relation(fields: [kegiatan_id], references: [id])
  babak          Babak[]
  juri           JuriOnPertandingan[]
}

enum BabakStatus {
  belum_dimulai
  berjalan
  jeda
  selesai
}

model Babak {
  id              Int          @id @default(autoincrement())
  no              Int
  status          BabakStatus  @default(belum_dimulai)
  timer           Int          @default(0)
  waktu_mulai     DateTime?
  pertandingan_id Int
  pertandingan    Pertandingan @relation(fields: [pertandingan_id], references: [id])
  point           Point[]
}

model Point {
  id             Int     @id @default(autoincrement())
  value          Int
  is_sudut_merah Boolean
  peserta_id     String  @db.VarChar(30)
  peserta        Peserta @relation(fields: [peserta_id], references: [id])
  juri           User    @relation(fields: [juri_id], references: [id])
  juri_id        String
  babak          Babak   @relation(fields: [babak_id], references: [id])
  babak_id       Int
}

// //setiap babak memiliki

// 1 user memiliki banyak pertandingan
// 1 pertandingan memiliki banyak user
// 1 user memiliki banyak point

// Jika ingin mencari poin yang dikumpulkan juri, maka seleksi semua juri berdasarkan pertandingan, dan seleksi berdasarkan babak, dan seleksi berdasarkan point

// fitur yang diinginkan

// 1. Mengumpulkan semua poin berdasarkan babak lalu juri
// 2. Mengumpulkan semua poin berdasarkan peserta lalu babak
